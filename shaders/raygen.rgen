#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : enable

#include "include/raycommon.glsl"

layout(location = 0) rayPayloadEXT HitPayload hitPayload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D storageImage;
layout(binding = 2, set = 0) uniform CameraProperties {
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(push_constant) uniform PushConstants {
    // The current system time in seconds. Used for RNG seeds.
    float iTime;
} constants;

#include "include/random.glsl"

// Utility function to get the ray direction based on the pixel position.
vec3 getRayDirection(in float offset) {
    const vec2 pixel = gl_LaunchIDEXT.xy + offset;
    const vec2 inUV = pixel / gl_LaunchSizeEXT.xy;
    const vec2 d = inUV * 2.0 - 1.0;
    const vec4 target = cam.projInverse * vec4(d.x, d.y, 1.0, 1.0);
    return (cam.viewInverse * vec4(normalize(target.xyz), 0.0)).xyz;
}

void main() {
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 rayOrigin = vec3(cam.viewInverse * vec4(0, 0, 0, 1));
    hitPayload.hitValue = vec4(1.0);

    // We take 4 samples with slightly adjusted jitter for anti-aliasing (essentially MSAA with 4 samples).
    const uint samples = 4;
    vec4 outputColor = vec4(0.0);
    hitPayload.rayRecursionDepth = 0;
    for (uint s = 0; s < samples; s++) {
        // Will get us values between 0..1, essentially going from the current pixel until the next.
        float pixelJitter = randomNoise(gl_LaunchIDEXT.xy, fract(constants.iTime));
        hitPayload.rayDirection = getRayDirection(pixelJitter);
        hitPayload.origin = rayOrigin; // We re-set it for each sample cause the rchit shader modifies it for ray bounces.

        traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, hitPayload.origin, tmin, hitPayload.rayDirection, tmax, 0);
        outputColor += hitPayload.hitValue;
    }
    outputColor /= float(samples); // Get the average of all the samples

    // Gamma correct the output.
    float gamma = 2.2; // Usual gamma for common displays
    outputColor = pow(outputColor, vec4(1.0 / gamma));
    imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), outputColor);
}
